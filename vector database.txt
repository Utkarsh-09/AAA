Vector database - Database for the AI era?

As AI continues to grow and evolve, the limitations of traditional databases become more apparent as complex data is growing at break-neck speed. 
Enter the era of vector databases - a new breed of databases designed specifically for the demands of this unstructured data.
Lets first understand what a vector actually is.
Vector is just an array of numbers but what's cool about vectors is that they can represent
more complex objects like words, sentences ,images or audio files in a continuous high dimensional space called an embedding.
Embeddings map the semantic meaning of words together or similar features in virtually any other data type. 
These embeddings can then be used for things like recommendation systems , search engines and generative AI but once you have your
embeddings the question becomes where do you store them and how do you query them quickly. That's where Vector databases
come in. In a relational database you have rows and columns , in a document database you have documents and
collections but in a vector database you have arrays of numbers clustered together based on similarity which can be queried with ultra low latency making
it an ideal choice for AI driven applications.

New money for new kind of database.
A bunch of new native Vector databases are popping up(Pinecone , Weaviate , QDrant , Milvus among the popular ones) raising millions from VCs like Andreessen Horowitz and Index Ventures around the same time. 
But is all the money being thrown at these companies worth anything? Well, vectors themselves are very valuable while representing richer datasets ranging
from text, audio, images and videos, which is perfect for the myriad of use cases that generative AI has brought up. 
It isn’t that this throws traditional databases like Postgres or NoSQL database Redis out of the competition completely as postgres have tools like PG Vector to
support this type of functionality and redis also has first class Vector support but If AI is front-and-centre for most companies now, it is only natural that they will be demanding an AI-first infrastructure.

Vector databases enable a number of other use cases:
1. Search engines
2. Automated Q&A 
3. Ranking and Recommendation engines
4. Classification or near-classification solutions (e.g. anomaly detection)
5. Deep personalization
6. Low-latency edge AI applications
7. Similarity search for images, audio, video, JSON, and other forms of unstructured data
8. And, once again, generative AI tools like ChatGPT

Closing observations -
Vector databases will become essential elements in the Foundational ML/LLM stack to overcome the shortcomings of the large language models and greatly increasing their output.
ChatGPT, Langchain, Midjourney ,Stable Diffusion , etc. occupy todays discourse. And while it seems that large language models are showing a remarkable ability to mimic human reasoning 
and creative output, they are still not reliable. Even most advanced models such as GPT-4 that greatly enhanced using RLHF techniques still hallucinate, deviate or omit facts.
The use of a vector database will also facilitate tracking data lineage. This matters because if users are to trust model output, they will need to be able to track the movement of 
data over time from the source system through different forms of persistence and transformations.

Vector search and vector databases aren’t the only new systems being used for the long term memory for these LLMs
There are also certain techniques popping up recently that are able to scale these LLMs(BERT specifically) to 1M tokens and beyond with 
Recurrent Memory Transformer while maintaining high memory retrieval
accuracy and without the use of these vector databases.
So it will be interesting to see how these will pan out as solving their computational challenges at scale is an area of continual development.


Source :
https://gradientflow.com/the-vector-database-index/
https://gradientflow.com/vector-database-primer/
https://gradientflow.com/?s=vector+database&orderby=relevance&order=DESC
https://github.com/booydar/t5-experiments/tree/scaling-report
https://arxiv.org/pdf/2304.11062.pdf