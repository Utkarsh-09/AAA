Here are the steps to sort the COBOL code, provide pseudocode, and convert to Python ETL code:

1. Identify the major sections of the COBOL code:

- IDENTIFICATION DIVISION
- ENVIRONMENT DIVISION
- DATA DIVISION
  - FILE SECTION
  - WORKING STORAGE SECTION
- PROCEDURE DIVISION
  - Main logic
  - Subroutines

2. Arrange the code blocks in order of execution:

- IDENTIFICATION DIVISION
- ENVIRONMENT DIVISION
- DATA DIVISION
- PROCEDURE DIVISION
  - Main logic
    - Initialize
    - Open files
    - Read input file
    - Perform transformations
    - Write output file
    - Close files
  - Subroutines
    - TRANSFORM-DATA
    - VALIDATE-DATA
    - WRITE-ERROR-LOG

3. Provide pseudocode:

```
Initialize program
  Open INPUT-FILE for reading
  Open OUTPUT-FILE for writing
  Open ERROR-LOG for writing

Read record from INPUT-FILE
 
While not end of INPUT-FILE
  PERFORM TRANSFORM-DATA on record
  
  PERFORM VALIDATE-DATA on record
  
  If valid record
    Write record to OUTPUT-FILE
  Else
    Write record to ERROR-LOG
  Endif
  
  Read next record from INPUT-FILE
Endwhile

Close all files

TRANSFORM-DATA:
  // Apply transformations
  
VALIDATE-DATA:
  // Validate record
  
WRITE-ERROR-LOG:
  // Write error record to log
```

4. Convert pseudocode to Python ETL code:

```python
import pandas as pd

input_file = 'input.csv'
output_file = 'output.csv'
error_log = 'error.log'

df = pd.read_csv(input_file)

for index, row in df.iterrows():

  # Transform
  row['NewCol'] = transform(row['OldCol'])  
  
  # Validate
  if validate(row):
    print(row, file=output_file)
  else:
    print(row, file=error_log)

def transform(old_col):
  # transformations
  return new_col

def validate(row):
  # validations
  return True/False 
```

This shows the high-level steps to rearrange the COBOL code, provide pseudocode, and convert to Python ETL code to achieve code modernization. The Python code uses pandas for data processing and loops through the rows to perform transformations and validations.